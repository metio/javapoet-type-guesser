node {

    def projectName = "sebhoss/javapoet-type-guesser"
    def repositoryLocation = ".repository"
    def timestamp = new java.text.SimpleDateFormat('yyyy.MM.dd-HHmmss').format(new Date())
    def mavenVersion = "maven-latest"
    def mavenSettings = "repository.metio.wtf"
    def releaseTarget = "sonatype"
    def skipLocalStaging = "false"
    def githubCredentials = "build-metio-wtf-github"

    stage('Cleanup') {
        deleteDir()
    }

    stage("Checkout") {
        checkout scm
    }

    stage('Versioning') {
        withMaven(
                maven: "${mavenVersion}",
                mavenSettingsConfig: "${mavenSettings}",
                mavenLocalRepo: "${repositoryLocation}") {
            sh """
                mvn --batch-mode \
                    --show-version \
                    versions:set \
                    -DgenerateBackupPoms=false \
                    -DnewVersion=${timestamp}
            """
        }
    }

   stage('Analyze') {
        withSonarQubeEnv('quality.metio.wtf') {
            withMaven(
                    maven: "${mavenVersion}",
                    mavenSettingsConfig: "${mavenSettings}",
                    mavenLocalRepo: "${repositoryLocation}") {
                sh """
                    mvn --batch-mode \
                        --show-version \
                        install
                """
                sh """
                    mvn --batch-mode \
                        --show-version \
                        sonar:sonar
                """
            }
        }
    }

    stage('Deploy') {
        withCredentials([
                string(credentialsId: 'pgp.secretkey', variable: 'PGP_KEY'),
                string(credentialsId: 'pgp.passphrase', variable: 'PGP_PASSPHRASE')]) {
            configFileProvider([configFile(fileId: "${mavenSettings}", variable: 'MAVEN_SETTINGS')]) {
                withMaven(
                        maven: "${mavenVersion}",
                        mavenLocalRepo: "${repositoryLocation}") {
                    sh """
                        mvn --batch-mode \
                            --settings $MAVEN_SETTINGS \
                            --show-version \
                            --activate-profiles release \
                            --define revision=${TIMESTAMP} \
                            --define release=${releaseTarget} \
                            --define skipLocalStaging=${skipLocalStaging} \
                            --define pgp.secretKey=keyfile:${PGP_KEY} \
                            --define pgp.passphrase=literal:'${PGP_PASSPHRASE}'
                            deploy
                    """
                }
            }
        }
    }

    stage('Git config') {
        withCredentials([
                string(credentialsId: 'git.user.name', variable: 'GIT_USER'),
                string(credentialsId: 'git.user.email', variable: 'GIT_EMAIL')]) {
            sh "git config user.name '${GIT_USER}'"
            sh "git config user.email '${GIT_EMAIL}'"
        }
    }

    stage('Tag') {
        withMaven(
                maven: "${mavenVersion}",
                mavenSettingsConfig: "${mavenSettings}",
                mavenLocalRepo: "${repositoryLocation}") {
            sh """
                mvn --batch-mode \
                    --show-version \
                    scm:tag \
                    -DpushChanges=false
            """
        }
    }

    stage('Git Push') {
        withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: "${githubCredentials}",
                            usernameVariable: 'USERNAME', passwordVariable: 'TOKEN']]) {
            sh "git push https://${TOKEN}:x-oauth-basic@github.com/${projectName}.git --tags"
        }
    }

}